name: Run unit tests

on:
  push:
    branches: [ '*' ]
  pull_request:

env:
  COVERAGE_REPORT_FILE: coverage.txt
  GIT_PUSH_SCRIPT: .github/scripts/git-push.ps1
  GH_ACTIONS_EMAIL: "github-actions@github.com"
  GH_ACTIONS_USER_NAME: "github-actions"
  MASTER_BRANCH: refs/heads/master
  README_PATH: README.md

jobs:
  test:
    runs-on: ubuntu-latest

    permissions:
      # Give the default GITHUB_TOKEN write permission to commit and push the changed files back to the repository.
      contents: write

    steps:
    - name: Checkout current repo
      uses: actions/checkout@v4

    - name: Clone required browser repo
      uses: actions/checkout@v4
      with:
        repository: grzegorz-ozanski/browser
        path: browser
        token: ${{ secrets.BROWSER_REPO_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 'lts/*'

    - name: Install dependencies
      shell: pwsh
      run: |
        pip install -r requirements-dev.txt

    - name: Install Pyright
      shell: pwsh
      run: |
        npm install -g pyright

    - name: Run tests with coverage
      shell: pwsh
      run: |
        coverage run -m pytest
        coverage report

    - name: Generate HTML coverage report
      if: always()
      shell: pwsh
      run: |
        coverage html
        coverage report > ${env:COVERAGE_REPORT_FILE}
        Compress-Archive -Path htmlcov -DestinationPath htmlcov.zip

    - name: Upload coverage artifact
      uses: actions/upload-artifact@v4
      continue-on-error: true
      with:
        name: htmlcov
        path: htmlcov.zip

    - name: Add coverage report to summary
      if: always()
      shell: pwsh
      run: |
        echo '### ðŸ§ª Test Coverage Summary' >> ${env:GITHUB_STEP_SUMMARY}
        echo '```' >> ${env:GITHUB_STEP_SUMMARY}
        cat ${env:COVERAGE_REPORT_FILE} >> ${env:GITHUB_STEP_SUMMARY}
        echo '```' >> ${env:GITHUB_STEP_SUMMARY}

    - name: Add mypy results to summary
      if: always()
      shell: pwsh
      run: |
        echo '### âœ… Static Analysis Summary' >> ${env:GITHUB_STEP_SUMMARY}
        echo '```' >> ${env:GITHUB_STEP_SUMMARY}
        mypy . --strict --ignore-missing-imports >> ${env:GITHUB_STEP_SUMMARY}
        echo '```' >> ${env:GITHUB_STEP_SUMMARY}

    - name: Add pyright results to summary
      if: always()
      shell: pwsh
      run: |
        echo '### âœ… Pyright Summary' >> ${env:GITHUB_STEP_SUMMARY}
        echo '```' >> ${env:GITHUB_STEP_SUMMARY}
        pyright >> ${env:GITHUB_STEP_SUMMARY}
        echo '```' >> ${env:GITHUB_STEP_SUMMARY}

    - name: "[SKIP REASON] Update coverage badge in README"
      if: github.ref != env.MASTER_BRANCH
      shell: pwsh
      run: |-
        $msg = "::notice ::Skipping 'Update coverage badge in README' step " +
               "because 'github.ref != ${{ env.MASTER_BRANCH }}'"
        echo $msg

    - name: Update coverage badge in README
      if: github.ref == env.MASTER_BRANCH
      shell: pwsh
      run: |
        $lines = Get-Content ${env:COVERAGE_REPORT_FILE} 
        $totalLine = $lines | Where-Object { $_ -match '^TOTAL\s' }
        if (-not $totalLine) {
          Write-Warning "No TOTAL line found in coverage report"
          exit 0
        }
        $columns = $totalLine -split '\s+'
        $percent = $columns[-1] -replace '%', ''

        if ([int]$percent -ge 90) {
          $color = 'brightgreen'
        } elseif ([int]$percent -ge 75) {
          $color = 'green'
        } elseif ([int]$percent -ge 60) {
          $color = 'yellow'
        } else {
          $color = 'red'
        }

        $badgePattern = '!\[Coverage\]\(https://img\.shields\.io/badge/coverage-[0-9]+%25-[a-z]+\)'
        $newBadge = "![Coverage](https://img.shields.io/badge/coverage-${percent}%25-${color})"

        (Get-Content ${env:README_PATH}) -replace $badgePattern, $newBadge | Set-Content ${env:README_PATH}

    - name: "[SKIP REASON] Commit updated README"
      if: github.ref != env.MASTER_BRANCH
      shell: pwsh
      run: |-
        $msg = "::notice ::Skipping 'Commit updated README' step " +
               "because 'github.ref != ${{ env.MASTER_BRANCH }}'"
        echo $msg

    - name: Commit updated README
      if: github.ref == env.MASTER_BRANCH
      shell: pwsh
      run: |
        pwsh -File ${env:GIT_PUSH_SCRIPT} `
        ${env:README_PATH} `
        "Update coverage badge [skip ci]" `
        ${env:GH_ACTIONS_USER_NAME} `
        ${env:GH_ACTIONS_EMAIL}
