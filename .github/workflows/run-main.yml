name: Run payments

on:
  push:
    branches: [ master ]
  schedule:
    - cron: "5 0,6,12,18 * * *"  # 4 times a days
  workflow_dispatch:
    inputs:
      dump:
        description: 'Dump workspace after job?'
        required: false
        default: 'false'
env:
  STATUS_FILE: .github/status/last-status.txt
  GH_TOKEN: ${{ secrets.CHROME_REPO_TOKEN }}
  LIBRARY: .github/scripts/functions.ps1
  COMPARE_SCRIPT: .github/scripts/compare-output.ps1
  MASK_SCRIPT: .github/scripts/mask-env-secrets.ps1
#  SCRIPT_OUTPUT: script_output.txt
  SCRIPT_OUTPUT: .github/data/test_output.txt
  REFERENCE_OUTPUT: .github/data/reference_output.txt
  REFERENCE_CONTENT: reference.txt
  ACTUAL_CONTENT: actual.txt
  DIFF_FILE: diff.txt
  CHROMEDRIVER_VERSION: chromedriver-chrome-134.0.6944.0

jobs:
#  run-ubuntu:
#    runs-on: ubuntu-latest
#
#    steps:
#    - name: Checkout current repo
#      uses: actions/checkout@v4
#
#    - name: Clone browser repo
#      run: |
#        git clone https://x-access-token:${{ secrets.BROWSER_REPO_TOKEN }}@github.com/grzegorz-ozanski/browser.git
#
#    - name: Install GitHub CLI
#      uses: cli/cli-action@v2
#
#    - name: Download Chrome i Chromedriver from GitHub Release
#      run: |
#        CHROMEDRIVER_VERSION=chromedriver-chrome-134.0.6944.0
#        gh release download "${CHROMEDRIVER_VERSION}" \
#          --repo grzegorz-ozanski/chrome \
#          --pattern "${CHROMEDRIVER_VERSION}.zip"
#         unzip ${CHROMEDRIVER_VERSION}.zip
#      env:
#        GH_TOKEN: ${{ secrets.CHROME_REPO_TOKEN }}
#
#    - name: Set up Python
#      uses: actions/setup-python@v5
#      with:
#        python-version: '3.11'
#
#    - name: Install dependencies
#      run: |
#        python -m pip install --upgrade pip
#        pip install -r requirements.txt
#
#    - name: Add dependency to PYTHONPATH
#      run: echo "PYTHONPATH=$(pwd)/browser" >> $GITHUB_ENV
#
#    - name: Run the script
#      run: python main.py
#

  run-windows:
    runs-on: [self-hosted, Windows]

    permissions:
      # Give the default GITHUB_TOKEN write permission to commit and push the changed files back to the repository.
      contents: write

    steps:
    - name: Checkout current repo
      uses: actions/checkout@v4

    - name: Read previous status
      id: readstatus
      shell: pwsh
      run: |
        $file = "${env:STATUS_FILE}"
        if (Test-Path $file) {
          $value = Get-Content $file -Raw
          echo "previous=$value" >> ${env:GITHUB_OUTPUT}
        } else {
          Write-Host "Previous status file not found in '${env:STATUS_FILE}'!"
          Exit 20
        }

    - name: Use system Python 3.11
      if: runner.os == 'Windows'
      run: |
        $PYTHONPATH = "$env:USERPROFILE/AppData/Local/Programs/Python/Python311"
        echo "$PYTHONPATH" >> $env:GITHUB_PATH

    - name: Verify system Python 3.11
      run: |
        python --version
        where python

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r requirements.txt

    - name: Clone browser repo
      uses: actions/checkout@v4
      with:
        repository: grzegorz-ozanski/browser
        path: browser
        token: ${{ secrets.BROWSER_REPO_TOKEN }}

    - name: Download Chrome and Chromedriver from GitHub Release
      run: |
        gh release download ${env:CHROMEDRIVER_VERSION} `
          --repo grzegorz-ozanski/chrome `
          --pattern "${env:CHROMEDRIVER_VERSION}.zip"
        Expand-Archive -Path "${env:CHROMEDRIVER_VERSION}.zip" -DestinationPath .

    - name: Prepare environment
      run: |
        # Add dependency to PYTHONPATH
        echo "PYTHONPATH=$(pwd)/browser" >> $env:GITHUB_ENV
        # Prepare credentials
        echo "${{ secrets.CREDENTIALS }}" >> $env:GITHUB_ENV
        # Mask credentials
        pwsh -File $env:MASK_SCRIPT "_USERNAME,_PASSWORD" "${{ secrets.CREDENTIALS }}" 

    - name: "[SKIP REASON] Run the script skipped"
      if: ${{ contains(env.SCRIPT_OUTPUT, 'test_') }}
      run: echo "::notice ::Skipping 'Run the script' step because 'env.SCRIPT_OUTPUT' contains 'test_."

    - name: Run the script
      if: ${{ ! contains(env.SCRIPT_OUTPUT, 'test_') }}
      shell: pwsh
      run: python main.py 2>&1 > ${env:SCRIPT_OUTPUT}

    - name: Compare script output with reference
      id: compare
      shell: pwsh
      run: |
        pwsh -File ${env:COMPARE_SCRIPT} `
        ${env:SCRIPT_OUTPUT} `
        ${env:REFERENCE_OUTPUT} `
        -ComparedActual ${env:ACTUAL_CONTENT} `
        -ComparedExpected ${env:REFERENCE_CONTENT} `
        -Diff ${env:DIFF_FILE}

    - name: Upload error logs
      uses: actions/upload-artifact@v4
      with:
        name: error-logs
        if-no-files-found: ignore
        path: |
          ./*.png
          ./*.html

    - name: "[SKIP REASON] Upload log skipped"
      if: env.COMPARISON_STATUS == 'unchanged'
      run: echo "::notice ::Skipping 'Upload log if script output is different than reference' step because env.COMPARISON_STATUS == 'unchanged''."

    - name: Upload log if script output is different than reference
      if: env.COMPARISON_STATUS == 'changed'
      uses: actions/upload-artifact@v4
      with:
        name: changed-output
        path: |
          ${{ env.SCRIPT_OUTPUT }}
          ${{ env.ACTUAL_CONTENT }}
          ${{ env.REFERENCE_CONTENT }}
          ${{ env.DIFF_FILE }}

    # üîÅ Compare current workflow status with the previous one
    - name: Compare workflow status
      id: statuscheck
      if: always()
      shell: pwsh
      run: |
        $previous = "${{ steps.readstatus.outputs.previous }}"
        $current = ${env:COMPARISON_STATUS }

        Write-Host "Previous: $previous"
        Write-Host "Current: $current"

        if ($previous -ne $current) {
          "changed=true" >> $env:GITHUB_OUTPUT
        } else {
          "changed=false" >> $env:GITHUB_OUTPUT
        }

        if ($previous -eq "failure") {
          $emoji = "‚ùå"
        } elseif ($status -eq "success") {
          $emoji = "‚úÖ"
        } elseif ($status -eq "unknown") {
          $emoji = "üÜï"
        } else {
          $emoji = "‚ùî"
        }
        
        @"
        # üõ†Ô∏è Workflow summary
        
        - **Previous run status**: $emoji $status
        - **Current comparison status**: ${{ env.COMPARISON_STATUS }}
        "@ | Add-Content -Path $env:GITHUB_STEP_SUMMARY

    - name: "[SKIP REASON] Send email if script output comparison result changed skipped"
      if: github.event_name != 'schedule' || env.COMPARISON_STATUS == 'changed'
      run: |-
        echo "::notice ::Skipping 'Send email if script output comparison result changed' step because condition " + 
             "'github.event_name == 'schedule' && env.COMPARISON_STATUS == 'changed' is not met'."

    # üíå Send email only on status change
    - name: Send email if script output comparison result changed and run was scheduled
      if: github.event_name == 'schedule' && env.COMPARISON_STATUS == 'changed'
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 465
        username: ${{ secrets.GMAIL_USERNAME }}
        password: ${{ secrets.GMAIL_APP_PASSWORD }}
        subject: "‚ö†Ô∏è ${{ github.repository }} - scheduled job execution error"
        to: ${{ secrets.GMAIL_EMAIL_ADDRESS }}
        from: GitHub Actions <no-reply@github.com>
        body: |
          ${{ github.repository }} GitHub Actions scheduled job execution error - actual output is diffent than expected one.

          ‚û§ View artifact and logs:
          https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

          If this was expected, consider updating ${{ env.REFERENCE_OUTPUT }}

    - name: "[SKIP REASON] Copy working directory skipped"
      if: github.event.inputs.dump != 'true'
      run: echo "::notice ::Skipping 'Copy working directory for inspection' step because 'github.event.inputs.dump != 'true''."

    - name: Copy working directory for inspection
      if: github.event.inputs.dump == 'true'
      shell: pwsh
      env:
        WORKSPACE_DUMP_DIR: ${{ runner.os == 'Windows' && 'c:/actions-runner/jobs' || '/tmp/actions-runner/jobs' }}
      run: |
        $src = "$env:GITHUB_WORKSPACE"
        $dst = "${env:WORKSPACE_DUMP_DIR}\${{ github.run_id }}"
        mkdir -p $dst 
        Copy-Item -Path $src -Recurse -Destination $dst

    # üíæ Save current status
    - name: Save current status
      if: always()
      shell: pwsh
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        Set-Content -Path ${env:STATUS_FILE} -Value "${{ job.status }}" -Encoding UTF8
        git config user.name "github-actions"
        git config user.email "github-actions@github.com"
        git add .github/status/last-status.txt
        if (git diff --cached --quiet) {
          Write-Host "No changes to commit."
        } else {
          git commit -m "Update last run status [skip ci]"
          git push
        }

    - name: "[SKIP REASON] Fail workflow"
      if: env.COMPARISON_STATUS == 'unchanged'
      run: echo "::notice ::Skipping 'Fail workflow if script output is different than reference' step because 'env.COMPARISON_STATUS == 'unchanged''"

    - name: Fail workflow if script output is different than reference
      if: env.COMPARISON_STATUS == 'changed'
      shell: pwsh
      run: |
        Write-Host "‚ùå Output changed ‚Äì failing the run."
        Exit 10